The Waterfall Model:
get requirements -- product owner comes up with Software Requirement Speciifictions

Design -  By end we get Design Documents

Implementation - we get Software made by developers

Testing  - Final Software that is ready for deployment to production

The team is working in silos , no  collabration
the process is sequential , dev cant give feedback , testers cant give feedback because they are involved at later stages
change is costly

But in reality there will be unexpected changes , it will be hard if its found at testing phase , their will be delay , huge loss
delays can lead to low quality

=====================================================================================================================================

Agile Software Development:
An umbrella term for a set of frameworks and practices based on values and principles expressed in manifesto for agile software development
and the 12 principles behind it
There can be different frameworks Scrum , Extreme Programming , Kanban ,BDD etc


Through Agile we achieve
Individuals and interactions over processes and tools
working software over comprehensive documentation - software delivered in iterations , client gets software in early stages thus client can give feedback early
customer collabration over contract negotiation - team will be continuous collabration with customer
responding to change over following a plan - process is flexible enough to make any changes


Still Agile fall short
Testing will follows traditional model
Testing done at last stage

=====================================================================================================================================
Test Driven Development 
BDD originated from TDD

TDD is used for unit testing by developers
it is more of programming
test - code - refactor

test - write a test to fail
code - write just enough code to make the test pass
refactor - refactor the code 

=====================================================================================================================================
Birth of BDD
TDD fall short because unit test may fall short because they may be unreadable
Behaviours and not test
  as Should be Able to ....

a new tool called JBehave to write behaviour driven tests
Requirements are behaviours too - 
thus consistent vocabulary , eliminate ambigiuty , eliminate miscommunication
=====================================================================================================================================
What is BDD?
Collabration
Build shared understanding
Fast Feedback
Produce system documentation

Agile principles:
collabration through face - to -face conversations
Business people and developers must work together daily throughout the process
working software is primary measure of progress


We use ubiquitous langauge - Gherkin syntax

=====================================================================================================================================

Agile with BDD and TDD

both BDD , TDD can be in Agile

TDD deals with low level specifications while BDD deals with high level specifications


=====================================================================================================================================

About Demo Website:

#********************************************************************************************
THIS WEBSITE IS ONLY FOR TESTING PURPOSE. 
DO NOT PROVIDE YOUR PERSONAL INFORMATION ANYWHERE ON THE WEBSITE.
DO NOT ABUSE THE WEBSITE WITH TOO MANY REQUESTS. 
YOUR IP WILL BE BLOCKED IF FOUND MISUSING THE WEBSITE.
DO NOT SHARE THE WEBSITE DETAILS WITH OTHERS. THIS IS PURELY FOR YOUR OWN USAGE AND LEARNINGS.
#********************************************************************************************

URL: https://askomdch.com
-> The website uses $ as the currency for all transactions. 

SHIPPING
-> Shipping cost is calculated based on the Shipping address.
-> For US region, shipping cost is $5 (Tax is not applied to shipping cost)
-> For non-US region, shipping cost is $10 (Tax is not applied to shipping cost)
 
TAX
-> Sales tax is applied for US region. The amount of tax is different for each US state and is as per the attached us_tax_rates.csv. 
-> No tax is applied for non-US region.

ORDER
-> Order can be placed without an account as well as with a logged-in account.
-> Account can be created from the Account page as well as while placing the order using the "Create an account?" link
-> Login option is provided during checkout, if the customer is not already logged in.
-> Order details can be viewed by visting the Accounts page
-> Orders placed as a Guest cannot be viewed

COUPONS
-> Each coupon is applied on the full price and not on the discounted price. For e.g. If full price is $100. The off25 will give $25 off on $100. The btoff20 will give $20 off on $100. The final price will be $100 - $25 - $20 = 55$.

off15: Gives 15% off. Cannot be clubbed with other coupons
btoff20: 20% off only on the Blue TShirt (Product ID 1196). Cannot be used for any other product
freeship: Gives free shipping
offcart5: Gives flat $5 off on the entire cart.
off25: Gives 25% off on entire store.

ACCOUNT
-> View orders
-> Edit profile
-> Edit Billing and Shipping address


=====================================================================================================================================

Here's the list of great articles on Example mapping direct from the sources:

https://cucumber.io/docs/bdd/example-mapping/
https://cucumber.io/blog/bdd/example-mapping-introduction/
https://cucumber.io/blog/bdd/your-first-example-mapping-session/

=====================================================================================================================================

install java jdk - 17LTS 
use IDE - IntelliJ/Eclipse
Plugins


Setup Maven project in Eclipse:
1.install eclipse cucumber plugin from eclipse market place
	cucumber eclipse plugin

2.eclipse marketplace client - install this plugin also

3.search cucumber eclipse plugin from browser and drag and drop [follow the below way in step 4 instead]
4.go to https://github.com/cucumber - search eclispe , then go to https://github.com/cucumber/cucumber-eclipse-update-site

	then  select the work with : https://cucumber.github.io/cucumber-eclipse/update-site
	go to eclipse - Help - Install New Software - paste the link in the Work with - text box 
	click on Add and give some name and select the check box - click Next

5.Create a maven project , check mark skip archetype selection
	code related to test - will be in src/test/java
	code related to utilities - will be in src/main/java

6.add dependencies
	goto maven repo -  search cucumber java
	<dependency>
    <groupId>io.cucumber</groupId>
    <artifactId>cucumber-java</artifactId>
    <version>7.6.0</version>
</dependency>


To test create a package in src/test/java - awesomecucumber , create a feature file - dummy.feature

dummy.feature

Feature: dummy feature
	Scenario: dummy scenario
		Given I'm dummy
		When I do dummy things
		Then dummy things happen

Now right click on feature file - run as cucumber feature

it will give the step definitions for all the lines in feature file
copy it

Now create a class MyStepDef.java and paste it over there

package awesomecucumber;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class MyStepDef {

	@Given("I'm dummy")
	public void i_m_dummy() {
		// Write code here that turns the phrase above into concrete actions
		throw new io.cucumber.java.PendingException();
	}

	@When("I do dummy things")
	public void i_do_dummy_things() {
		// Write code here that turns the phrase above into concrete actions
		throw new io.cucumber.java.PendingException();
	}

	@Then("dummy things happen")
	public void dummy_things_happen() {
		// Write code here that turns the phrase above into concrete actions
		throw new io.cucumber.java.PendingException();
	}
}


Now go to project - configure - convert to cucumber project
Now we can jump from the feature file steps to the step definition file code - by using ctrl+click


Now run the feature file again , we get as implementation pending


