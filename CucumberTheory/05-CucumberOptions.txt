Cucumber Options:

https://cucumber.io/docs/cucumber/api/?lang=java

complete list of supported properties
https://cucumber.io/docs/cucumber/api/?lang=java#list-configuration-options


Adding plugin for junit and testng

@CucumberOptions(plugin = {"pretty", "html:target/cucumber.html"})  //<---------------
public class TestNGRunnerTest extends AbstractTestNGCucumberTests{

	
	@BeforeClass
	public static void beforeClass() {
		System.out.println("Before class");
	}
	
	@AfterClass
	public static void afterClass() {
		System.out.println("After class");
	}
}

@RunWith(Cucumber.class)
@CucumberOptions(plugin = {"pretty", "html:target/cucumber.html"})  //<---------------
public class JUnitRunnerTest {

	@BeforeClass
	public static void beforeClass() {
		System.out.println("in before class");
	}
	
	@AfterClass
	public static void afterClass() {
		System.out.println("in after class");
	}
}

============================================================================================================================================

By default the method names are seperated by underscore we can use a plugin to get them in camel case

package runner;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import static io.cucumber.junit.CucumberOptions.SnippetType.CAMELCASE;//-----------------------[1]


@RunWith(Cucumber.class)
@CucumberOptions(plugin = {"pretty", "html:target/cucumber.html","summary"},snippets=CAMELCASE)//-----[2](summary and snippets=CAMELCASE is added)
public class JUnitRunnerTest {

	@BeforeClass
	public static void beforeClass() {
		System.out.println("in before class");
	}
	
	@AfterClass
	public static void afterClass() {
		System.out.println("in after class");
	}
}

then run the Scenario thru runner class
============================================================================================================================================

find the missing step definitions:

by default dryRun is false


make it true to findout the missing step definitions and run the runner class

package runner;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import static io.cucumber.junit.CucumberOptions.SnippetType.CAMELCASE;


@RunWith(Cucumber.class)
@CucumberOptions(plugin = {"pretty", "html:target/cucumber.html","summary"},snippets=CAMELCASE,dryRun=true)//-----[1]
public class JUnitRunnerTest {

	@BeforeClass
	public static void beforeClass() {
		System.out.println("in before class");
	}
	
	@AfterClass
	public static void afterClass() {
		System.out.println("in after class");
	}
}


============================================================================================================================================

To format console output in readable format:

package runner;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import static io.cucumber.junit.CucumberOptions.SnippetType.CAMELCASE;

@RunWith(Cucumber.class)
@CucumberOptions(plugin = { "pretty", "html:target/cucumber.html",
		"summary" }, snippets = CAMELCASE, dryRun = true, monochrome = true) // -----[1]
public class JUnitRunnerTest {

	@BeforeClass
	public static void beforeClass() {
		System.out.println("in before class");
	}

	@AfterClass
	public static void afterClass() {
		System.out.println("in after class");
	}
}

============================================================================================================================================
Tags:
run some specific scenarios

then tag scenarios as smoke or sanity or regression and exceute only those testcases


Feature: Add to cart
	Rule: Add from store
	
	@Scenario1  										//<--------------------[1]
	Scenario Outline: Add one quantity to the cart
		Given I'm on the Store page
		When I add a <product_name> to the cart
		Then I see 1 <product_name> in the Cart
		Examples:
			| product_name |
			| Blue Shoes   |


@RunWith(Cucumber.class)
@CucumberOptions(plugin = { "pretty", "html:target/cucumber.html",
		"summary" }, snippets = CAMELCASE, dryRun = true, monochrome = true
		,tags="@Scenario1") 								// -----[2]
public class JUnitRunnerTest {

	@BeforeClass
	public static void beforeClass() {
		System.out.println("in before class");
	}

	@AfterClass
	public static void afterClass() {
		System.out.println("in after class");
	}
}



we can use tags="@Scenario1 or @Scenario2" 
		tags="@Scenario1 and not @Scenario2"
		tags="@Scenario1 and @Scenario2"
============================================================================================================================================
glue and feature paths:


@RunWith(Cucumber.class)
@CucumberOptions(plugin = { "pretty", "html:target/cucumber.html",
		"summary" }, snippets = CAMELCASE, dryRun = true, monochrome = false
		,tags="@Scenario1",
		glue="awesomecucumber",
		features = "resourceFiles") // -----[1]


glue="awesomecucumber"
glue={"awesomecucumber","awesomecucumber.hooks"}
glue is path for stepdefinition java classes , if hooks are there give the path here only , and also if we have multiple stepdef package give there path also comma seperated
features is path for .feature files
